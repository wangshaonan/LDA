#!/usr/bin/python
# -*- coding: utf-8 -*-
import os
import sys

#vocab = open('test/vocabulary.dat', 'w')
# 文本中出现频率很高，但实际意义又不大的词，主要指副词、虚词、语气词等
stopwords_list = u'18,）们,6．,消．．．,＼,疾．．．,32．．,－3,－4,－5,－7,－1,≤,α,60,－6,11．5,－2,1．四川,－16,4．,1．,2.,115,”们,Ⅱ,°,﹔,．．,Ⅱ家,A,B,C,D,E,F,G,H,I,G,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,＇,-,--,－,－－,—,——,———,--,－－,！,",#,＃,$,％,&,＆,(,（,),）,）、,）÷（１－,*,＊,,,，,，也,、,．,.,...,......,...................,./,.日,.数,.一,。,/,／,//,:,：,://,::,;,；,?,？,?,@,[,［,［－,［＊］,－［＊］－,［］,［①］,［①①］,［①②］,［①③］,［①④］,［①⑤］,［①⑥］,［①⑦］,［①⑧］,［①⑨］,［①ａ］,［①Ａ］,［①Ｂ］,［①ｃ］,［①Ｃ］,［①ｄ］,［①Ｄ］,［①ｅ］,［①Ｅ］,［①ｆ］,［①ｇ］,［①ｈ］,［①ｉ］,［①ｏ］,［②,［②］,［②①］,［②②］,［②③］,［②④,［②⑤］,［②⑥］,［②⑦］,［②⑧］,［②⑩］,［②ａ］,［②ｂ］,［②Ｂ］,［②ｃ］,［②ｄ］,［②ｅ］,［②ｆ］,［②ｇ］,［②Ｇ］,［②ｈ］,［②ｉ］,［②ｊ］,［③］,［③①］,［③⑩］,［③ａ］,［③ｂ］,［③ｃ］,［③ｄ］,［③ｅ］,［③Ｆ］,［③ｇ］,［③ｈ］,［④］,［④ａ］,［④ｂ］,［④ｃ］,［④ｄ］,［④ｅ］,［⑤］,［⑤］］,［⑤ａ］,［⑤ｂ］,［⑤ｄ］,［⑤ｅ］,［⑤ｆ］,［⑥］,［⑦］,［⑧］,［⑨］,［⑩］,],］,］［,］∧′＝［,_,＿,｛－,},｝,｝＞,～,~~~~,～＋,～±,‘,’,’‘,“,”,”，,′｜,′∈,〉,《,》,》），,」,『,』,【,】,〔,〕,〕〔,+,＋,＋＋,＋ξ,<,＜,＜＜,＜±,＜Δ,＜λ,＜φ,=,＝,＝－,＝（,＝［,＝｛,＝″,＝☆,>,＞,＞λ,×,×,×××,∈［,∪φ∈,≈,■,▲,↑,→,──,·,……,…………………………………………………,0,０：２,1,①,１．,１２％,2,②,２．３％,②ｃ,3,③,③］,4,④,5,⑤,５：０,6,⑥,7,⑦,8,⑧,9,⑨,⑩,Ⅲ,Ａ,ａ］,ｂ］,℃,ｃ］,ｅ］,exp,ｆ］,Lex,ＬＩ,ｎｇ昉,Ｒ．Ｌ．,sub,sup,ＺＸＦＩＴＬ,－β,γ,Δ,μ,φ,φ．,Ψ,В,－－,－－－,４,１,９,７,５,２,６,８,０,３,一,二,三,四,五,六,七,八,九,十,三十,二十五,四十,六十,八十,九十,一百,二十,五十,七十,六十五,一.,阿,啊,哎,哎呀,哎哟,唉,嗳,安全,俺,俺们,按,按照,八,巴,巴巴,把,罢了,吧,吧哒,般的,帮助,保持,报道,被,呗,本,本报,本地,本人,本身,本着,比,比方,比及,比较,比如,彼,彼此,彼时,鄙人,必然,必须,必要,避免,边,变成,便于,表明,表示,别,别处,别的,别管,别人,别是,别说,并,并不,并不是,并非,并没有,并且,不,不比,不变,不成,不单,不但,不得,不独,不断,不妨,不敢,不够,不管,不光,不过,不会,不仅,不尽,不尽然,不久,不拘,不可,不料,不论,不能,不怕,不然,不如,不若,不是,不特,不同,不外乎,不惟,不问,不要,不一,不只,不至于,不足,部分,才,才能,采取,曾,曾经,产生,常常,朝,朝着,彻底,趁,趁着,成为,诚然,诚如,乘,冲,充分,出来,出去,出现,出于,除,除此之外,除非,除开,除了,除外,处理,处在,此,此处,此次,此地,此间,此时,此外,从,从此,从而,从事,促进,啐,存在,达到,打,打从,大,大大,大多数,大家,大力,大量,大批,大约,代替,待,但,但凡,但是,当,当地,当前,当然,当时,当着,到,得,得出,得到,得了,的,的话,的确,等,等到,等等,地,第,第二,电,叮咚,咚,都,对,对比,对待,对方,对应,对于,多,多次,多么,多少,多数,呃,嗯,儿,而,而后,而况,而且,而是,而外,而言,而已,尔,尔尔,尔后,二,二来,凡,凡是,反而,反过来,反过来说,反应,反映,反之,方面,防止,非常,非但,非独,非特,非徒,分别,份,丰富,否则,附近,复杂,嘎,嘎登,该,赶,个,个别,个人,各,各地,各个,各级,各人,各位,各种,各自,给,根本,根据,跟,更加,巩固,共同,构成,固然,故,故此,故而,关于,管,光是,广大,广泛,归,归齐,规定,果然,果真,过,过来,过去,哈,哈哈,还,还是,还要,还有,行动,行为,毫不,好,好的,好象,呵,呵呵,嗬,合理,何,何处,何况,何时,何以,和,嘿,嘿嘿,很,哼,哼唷,后,后来,后面,后者,後来,後面,乎,呼哧,互相,哗,欢迎,换句话说,换言之,或,或是,或曰,或则,或者,获得,积极,基本,基于,及,及其,及时,及至,极了,即,即便,即或,即令,即如,即若,即使,集中,几,几乎,几时,己,记者,既,既然,既是,既往,继而,继后,继续,继之,加强,加入,加以,加之,家,假如,假若,假使,坚持,坚决,兼之,简言之,鉴于,将,叫,叫做,觉得,较,较之,接着,接著,结果,结合,截至,介于,借,今,今后,今後,今年,今天,紧接着,尽,尽管,尽管如此,进步,进而,进行,进入,近年来,经,经常,经过,竟而,九,就,就是,就是了,就是说,就算,就要,举行,巨大,具体,具体地说,具体说来,具有,据,据此,据悉,距,决定,绝对,开始,开外,开展,看,看出,看到,看见,看看,看来,考虑,靠,咳,可,可见,可能,可是,可喜,可以,况且,扩大,啦,来,来说,来着,来自,赖以,啷当,了,了解,类如,离,里面,哩,立即,例如,连,连同,联系,练习,良好,两者,咧,临,零,另,另外,另悉,另一方面,六,喽,论,吗,嘛,满足,漫说,慢说,冒,么,没奈何,没有,每,每当,每个,每年,每天,们,密切,明确,明显,末##末,莫不然,莫如,莫若,某,某个,某某,某些,目前,拿,哪,哪边,哪儿,哪个,哪里,哪年,哪怕,哪天,哪些,哪样,那,那般,那边,那儿,那个,那会儿,那里,那么,那么些,那么样,那麽,那时,那些,那样,乃,乃至,乃至于,难道说,呢,内,能,能否,能够,你,你的,你们,您,宁,宁可,宁肯,宁愿,喏,哦,呕,啪达,旁人,呸,譬如,譬喻,凭,凭借,普遍,普通,七,其,其次,其二,其实,其他,其它,其一,其余,其中,岂但,企图,起,起见,起来,恰恰相反,前,前此,前后,前进,前面,前者,强烈,强调,且,且不说,且说,清楚,取得,去,全部,全面,全体,却,却不,确定,然而,然后,然後,然则,让,人,人家,人们,认识,认为,认真,任,任何,任凭,任务,仍,仍旧,仍然,容易,如,如此,如果,如何,如其,如若,如上,如上所述,如是,如同,如下,若,若非,若夫,若果,若是,三,啥,上,上来,上面,上去,上升,上述,上下,尚且,少数,设或,设若,设使,深入,什么,什么样,什麽,甚而,甚或,甚么,甚且,甚至,甚至于,省得,失去,十,十分,时候,实际,实现,使,使得,使用,始而,似的,似乎,是,是不是,是的,是否,是以,适当,适应,适用,首,首先,受,受到,孰料,孰知,属于,庶乎,庶几,数/,双方,谁,谁料,谁人,谁知,顺,顺着,说来,说明,说说,四,虽,虽然,虽说,虽则,随,随后,随时,随着,随著,所,所谓,所幸,所以,所有,所在,他,他的,他们,他人,它,它的,它们,它们的,她,她的,她们,谈起,倘,倘或,倘然,倘若,倘使,傥然,套,特别是,特点,特殊,腾,替,替代,条,通常,通过,同,同时,同样,同一,突出,突然,哇,完成,完全,万一,往,往往,望,为,为此,为何,为了,为什么,为什麽,为着,为止,为主,唯有,惟其,维持,伟大,位,喂,嗡,嗡嗡,喔唷,我,我的,我们,乌乎,呜,呜呼,无,无法,无论,无宁,毋宁,五,兮,嘻,系列,下,下来,下列,下面,下去,吓,先不先,先后,先後,先生,显然,显著,现代,现在,限制,线,相当,相等,相对,相对而言,相反,相似,相同,相信,相应,向,向使,向着,项,像,小,些,心里,新,新华社,形成,需要,嘘,许多,宣布,讯,迅速,呀,焉,严格,严重,沿,沿着,要,要不,要不然,要不是,要么,要求,要是,也,也罢,也好,也就是说,也是,一,一.,一般,一边,一次,一旦,一定,一番,一方面,一个,一何,一来,一面,一片,一起,一切,一时,一天,一下,一些,一样,一一,一则,一直,一致,一转眼,依,依据,依靠,依照,咦,移动,已,已经,已矣,以,以便,以故,以后,以後,以及,以来,以免,以期,以前,以上,以外,以为,以下,以至,以至于,以致,矣,矣乎,矣哉,亦,抑或,意思,因,因此,因而,因了,因为,因着,引起,应当,应该,应用,哟,用,用来,尤其,由,由此,由此可见,由是,由于,犹且,犹自,有,有的,有的是,有点,有关,有及,有力,有利,有时,有所,有效,有些,有着,有著,又,又及,于,于是,于是乎,欤,余外,与,与此同时,与否,与会,与其,与其说,遇到,原来,愿意,越是,云尔,云云,允许,运用,咋,哉,再,再其次,再说,再有,再则,再者,再者说,在,在下,在于,咱,咱们,遭到,造成,则,则甚,贼死,怎,怎么,怎么办,怎么样,怎麽,怎奈,怎样,眨眼,战斗,掌握,召开,照,照着,者,这,这般,这边,这次,这点,这儿,这个,这会儿,这就是说,这里,这么,这么点儿,这么些,这么样,这麽,这时,这些,这样,这一来,这种,着,着呢,针对,真是,真正,争取,整个,正常,正巧,正如,正是,正在,正值,之,之后,之後,之类,之前,之所以,之一,只,只当,只怕,只是,只限,只消,只要,只有,吱,知道,直到,直接,至,至今,至若,至于,致,中间,中小,种,重大,重新,重要,周围,诸,诸如,诸位,逐步,逐渐,主要,主张,注意,驻,驻外,专门,转变,转动,转贴,准备,自,自从,自打,自个儿,自各儿,自后,自己,自家,自身,综合,综上所述,总部,总的来看,总的来说,总的说来,总而言之,总结,总是,总之,纵,纵令,纵然,纵使,走,走进,组成,最,最初,最大,最高,最好,最后,最後,最近,最为,最新,遵循,遵照,左右,作为,座,做到,㈧'

def is_stopword(w):
    return w in stopwords_list

class Vocabulary:
    def __init__(self, excludes_stopwords=True):
        self.vocas = [] # vocabulary
        self.vocas_id = dict() 
        self.docfreq = []
        self.excluds_stopwords = excludes_stopwords

    def term_to_id(self, term):
#    	print term
#   	print repr(term)
        term = term.decode('UTF-8')
        if self.excluds_stopwords and is_stopword(term):
            return None
    	term = term.encode('UTF-8')
        if term not in self.vocas_id:
            voca_id = len(self.vocas)
            self.vocas_id[term] = voca_id
            self.vocas.append(term)
            self.docfreq.append(0)
        else:
            voca_id = self.vocas_id[term]
        return voca_id

    def doc_to_ids(self, doc):
        list = []
        words = dict()
        for term in doc:
            id = self.term_to_id(term)
            if id != None:
                list.append(id)
                if not words.has_key(id):
                    words[id] = 1
                    self.docfreq[id] += 1
#        if "close" in dir(doc): doc.close()
        return list

    def cut_low_freq(self, corpus, threshold ):
        new_vocas = []
        new_docfreq = []
        self.vocas_id = dict()
        conv_map = dict()
        for id, term in enumerate(self.vocas):
            freq = self.docfreq[id]
#            if freq > threshold and freq < len(corpus)+1:
            if freq > threshold:
                new_id = len(new_vocas)
                self.vocas_id[term] = new_id
                new_vocas.append(term)
                new_docfreq.append(freq)
                conv_map[id] = new_id
        self.vocas = new_vocas
        self.docfreq = new_docfreq

        def conv(doc):
            new_doc = []
            for id in doc:
               if id in conv_map: new_doc.append(conv_map[id])
            return new_doc
        return [conv(doc) for doc in corpus], self.vocas, self.vocas_id
